<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="add a foreign key to a table" enabled="true" name="afk">ALTER TABLE ${Child_Table}&#13;
	ADD CONSTRAINT FK_${Child_Table}_${Parent_Table}&#13;
	FOREIGN KEY (${Attributes})&#13;
	REFERENCES ${Parent_Table} (${Attributes})&#13;
;</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create a template for a check constraint" enabled="true" name="ckc">ALTER TABLE ${table} ADD CONSTRAINT ck_${name_ck}&#13;
CHECK (&#13;
	${condition}&#13;
);</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create assertion" enabled="true" name="creas">CREATE ASSERTION ${Name}&#13;
CHECK NOT EXIST(&#13;
	SELECT 1&#13;
	FROM&#13;
	${Rest_of_the_query}&#13;
);</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create a domain" enabled="true" name="cred">CREATE DOMAIN ${Name} AS ${Type} NOT NULL&#13;
CHECK (${Condition_on_value});</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create a stored procedure" enabled="true" name="cresp">CREATE OR REPLACE PROCEDURE  ${name}()&#13;
LANGUAGE 'plpgsql' AS&#13;
$$$$&#13;
	BEGIN&#13;
	${condition}&#13;
	--don't use new or old&#13;
	-- to use it you must do call ${name}&#13;
	END;&#13;
$$$$;&#13;
&#13;
</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create a table" enabled="true" name="cret">CREATE TABLE ${Table_Name} (&#13;
	${Pk_name} ${Pk_type},&#13;
	${Add_Column} ${Colunm_Type} ${Nullity},&#13;
	CONSTRAINT PK_${Table_Name} PRIMARY KEY (${Pk_name})&#13;
);</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="create trigger" enabled="true" name="cretr">CREATE OR REPLACE FUNCTION FN_${Name}() RETURNS trigger AS&#13;
$$$$&#13;
	--DECLARE&#13;
	BEGIN&#13;
		--new.column := value;&#13;
		RETURN ${NEW_OLD_NULL};&#13;
	END &#13;
$$$$&#13;
LANGUAGE 'plpgsql';&#13;
&#13;
CREATE TRIGGER TR_${Name}&#13;
	${AFTER_OR_BEFORE_OR_INSTEAD_OF} ${INSERT_OR_DELETE_OR_UPDATE} OF ${Atributte}&#13;
	ON ${Table}&#13;
	FOR EACH ${ROW_OR_STATEMENT}&#13;
	EXECUTE PROCEDURE FN_${Name}();</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="if statement" enabled="true" name="ifst">IF(&#13;
	EXISTS (&#13;
		SELECT 1&#13;
		FROM ${table}&#13;
		WHERE ${Condition}&#13;
	)&#13;
) THEN&#13;
	RAISE EXCEPTION '${Message}';&#13;
END IF;&#13;
&#13;
&#13;
</template><template autoinsert="true" context="sql_postgresql_postgres-jdbc" deleted="false" description="insert values into a table" enabled="true" name="ival">INSERT INTO ${table}(${id},${Attribute}) VALUES&#13;
	(${Id_value},${Attribute_value})&#13;
;</template></templates>